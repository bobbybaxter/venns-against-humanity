{"version":3,"sources":["Components/Diagram/Diagram.js","Components/Main/Main.js","App/App.js","serviceWorker.js","index.js"],"names":["Diagram","state","width","height","drawVenn","ref","printVenn","setsData","sets","console","error","chart","venn","refs","d3","datum","call","updateWindowDimensions","setState","window","innerWidth","innerHeight","this","addEventListener","removeEventListener","diagramData","props","setupDiagram","displayedCards","className","onClick","selectRandomCards","openModal","React","Component","defaultCards","Main","blackCards","whiteCards","randomCards","circleAText","Math","floor","random","length","circleA","circleBText","circleB","circleCText","circleC","circleAB","circleAC","circleBC","circleABC","push","cardsInput","cards","A","B","C","size","mainCircleSize","label","blackCardsAsArray","base","map","card","Object","values","printDiagram","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bcf1703.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as venn from 'venn.js';\r\n\r\nimport './Diagram.scss';\r\n\r\nclass Diagram extends React.Component {\r\n  state = {\r\n    width: 0,\r\n    height: 0,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  drawVenn = () => {\r\n    return (\r\n     <div ref=\"venn\"></div>\r\n    );\r\n  }\r\n\r\n  printVenn = (setsData) => {\r\n    const sets = setsData;\r\n    console.error('setsData', sets);\r\n    const chart = venn.VennDiagram().width(this.state.width).height(this.state.height - 150);\r\n    if (this.refs.venn) {\r\n      d3.select(this.refs.venn)\r\n        .datum(sets)\r\n        .call(chart);\r\n    }\r\n  }\r\n\r\n  updateWindowDimensions = () => {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  render() {\r\n    const diagramData = this.props.setupDiagram(this.props.displayedCards);\r\n    this.printVenn(diagramData);\r\n\r\n    return (\r\n      <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n        <h1 className=\"mt-3\">Venns Against Humanity</h1>\r\n        {this.drawVenn()}\r\n        <div className=\"d-flex flex-row justify-content-center align-items-center\">\r\n          <button className=\"btn btn-primary mx-1\" onClick={this.props.selectRandomCards}>Randomize!</button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={this.props.openModal}>Expansions</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Diagram;\r\n","/* eslint-disable max-len */\r\nimport React from 'react';\r\nimport base from '../../Helpers/Data/base.json';\r\nimport Diagram from '../Diagram/Diagram';\r\n\r\nimport './Main.scss';\r\n\r\nconst defaultCards = ['', ' ', '  ', '    ', '     ', '      ', '       '];\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    blackCards: [],\r\n    whiteCards: [],\r\n    displayedCards: [],\r\n  }\r\n\r\n  componentDidMount() {\r\n    const blackCardsAsArray = base.blackCards.map((card) => Object.values(card)[0]);\r\n    this.setState({ blackCards: blackCardsAsArray, whiteCards: base.whiteCards, displayedCards: defaultCards });\r\n  }\r\n\r\n  selectRandomCards = () => {\r\n    const { blackCards, whiteCards } = this.state;\r\n    const randomCards = [];\r\n    const circleAText = whiteCards[Math.floor(Math.random() * whiteCards.length)];\r\n    const circleA = `c1 ${circleAText}`;\r\n    const circleBText = whiteCards[Math.floor(Math.random() * whiteCards.length)];\r\n    const circleB = `c1 ${circleBText}`;\r\n    const circleCText = whiteCards[Math.floor(Math.random() * whiteCards.length)];\r\n    const circleC = `c1 ${circleCText}`;\r\n    const circleAB = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    const circleAC = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    const circleBC = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    const circleABC = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    randomCards.push([circleA, circleB, circleC, circleAB, circleAC, circleBC, circleABC]);\r\n    console.error('randomCards', randomCards);\r\n    this.setState({ displayedCards: randomCards });\r\n  }\r\n\r\n  setupDiagram = (cardsInput) => {\r\n    let cards = [];\r\n    let sets = [];\r\n    if (cardsInput) {\r\n      // eslint-disable-next-line prefer-destructuring\r\n      cards = cardsInput[0] === '' ? cardsInput : cardsInput[0];\r\n      const mainCircleSize = 10;\r\n      const intersectionCircleSize = mainCircleSize * 0.4;\r\n      const centerCircleSize = mainCircleSize * 0.2;\r\n      const A = cards[0];\r\n      const B = cards[1];\r\n      const C = cards[2];\r\n      const AB = cards[3];\r\n      const AC = cards[4];\r\n      const BC = cards[5];\r\n      const ABC = cards[6];\r\n      sets = [\r\n        { sets: [A], size: mainCircleSize },\r\n        { sets: [B], size: mainCircleSize },\r\n        { sets: [C], size: mainCircleSize },\r\n        { sets: [A, B], size: intersectionCircleSize, label: AB },\r\n        { sets: [A, C], size: intersectionCircleSize, label: AC },\r\n        { sets: [B, C], size: intersectionCircleSize, label: BC },\r\n        { sets: [A, B, C], size: centerCircleSize, label: ABC },\r\n      ];\r\n    }\r\n    return sets;\r\n  }\r\n\r\n  render() {\r\n    let printDiagram = '';\r\n    if (this.state.blackCards.length > 0) {\r\n      printDiagram = <Diagram\r\n          blackCards = {this.state.blackCards}\r\n          whiteCards = {this.state.whiteCards}\r\n          displayedCards = {this.state.displayedCards}\r\n          selectRandomCards = {this.selectRandomCards}\r\n          setupDiagram = {this.setupDiagram}\r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          {printDiagram}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\nimport Main from '../Components/Main/Main';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/index.scss';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}