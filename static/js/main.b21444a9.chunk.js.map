{"version":3,"sources":["Components/ExpansionModal/ExpansionModal.js","Components/Diagram/Diagram.js","Components/Main/Main.js","App/App.js","serviceWorker.js","index.js"],"names":["ExpansionModal","state","expansions","pendingExpansions","cancelModal","setState","props","toggle","handleCheckboxes","e","checkbox","target","updatedExpansions","checked","push","id","expansionsWithRemovedItem","filter","item","updateExpansionModalExpansions","updateDiagramExpansions","this","prevProps","expansion","allExpansions","modal","printExpansionList","map","exp","FormGroup","key","order","check","Label","Input","includes","onChange","type","data","name","Modal","isOpen","ModalBody","Form","ModalFooter","Button","color","onClick","React","Component","Diagram","width","height","drawVenn","ref","printVenn","setsData","sets","chart","venn","refs","d3","datum","call","prevState","updateMainExpansions","updateWindowDimensions","window","innerWidth","innerHeight","addEventListener","removeEventListener","diagramData","setupDiagram","displayedCards","className","selectRandomCards","defaultCards","CAHe1","CAHe2","CAHe3","CAHe4","CAHe5","CAHe6","greenbox","nineties","Box","fantasy","food","science","www","hillary","trumpvote","trumpbag","xmas2012","xmas2013","PAXE2013","PAXP2013","PAXE2014","PAXEP2014","PAXPP2014","HOCAH","reject","reject2","Canadian","Main","blackCards","whiteCards","randomCards","circleAText","Math","floor","random","length","circleA","circleBText","circleB","circleCText","circleC","circleAB","circleAC","circleBC","circleABC","cardsInput","cards","A","B","C","size","mainCircleSize","label","selectCards","expansionToCheck","expansionToCheckName","card","Object","values","forEach","pendingBlackCards","base","pendingWhiteCards","expansionName","expansionCards","blackCardsAsArray","whiteCardsAsArray","printDiagram","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b21444a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Button, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter,\r\n} from 'reactstrap';\r\n\r\nimport './ExpansionModal.scss';\r\n\r\nclass ExpansionModal extends React.Component {\r\n  state = {\r\n    expansions: [],\r\n    pendingExpansions: [],\r\n  }\r\n\r\n  cancelModal = () => {\r\n    this.setState({ expansions: this.props.expansions, pendingExpansions: this.props.expansions });\r\n    this.props.toggle();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ expansions: this.props.expansions, pendingExpansions: this.props.expansions });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.expansion !== prevProps.expansion) {\r\n      this.setState({ expansions: this.props.expansions });\r\n    }\r\n  }\r\n\r\n  handleCheckboxes = (e) => {\r\n    const checkbox = e.target;\r\n    const updatedExpansions = [...this.state.pendingExpansions];\r\n    if (checkbox.checked === true) {\r\n      updatedExpansions.push(checkbox.id);\r\n      this.setState({ pendingExpansions: updatedExpansions });\r\n    } else {\r\n      const expansionsWithRemovedItem = updatedExpansions.filter((item) => item !== checkbox.id);\r\n      this.setState({ pendingExpansions: expansionsWithRemovedItem });\r\n    }\r\n  }\r\n\r\n  updateExpansionModalExpansions = () => {\r\n    this.props.updateDiagramExpansions(this.state.pendingExpansions);\r\n    this.props.toggle();\r\n  }\r\n\r\n  render() {\r\n    const { allExpansions, modal, toggle } = this.props;\r\n    const modalText = '';\r\n    const printExpansionList = allExpansions.map((exp) => <FormGroup key={exp.order[0]} check>\r\n        <Label check>\r\n          <Input\r\n            checked={this.state.pendingExpansions.includes(exp.order[0])}\r\n            id={exp.order[0]}\r\n            onChange={this.handleCheckboxes}\r\n            type=\"checkbox\" />{' '}\r\n          {exp.data.name}\r\n        </Label>\r\n      </FormGroup>);\r\n\r\n    if (this.state.expansions) {\r\n      return <Modal isOpen={modal} toggle={toggle}>\r\n      <ModalBody>\r\n        <Form>\r\n          {printExpansionList}\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={this.updateExpansionModalExpansions}>Confirm</Button>{' '}\r\n        <Button color=\"secondary\" onClick={this.cancelModal}>Cancel</Button>\r\n      </ModalFooter>\r\n    </Modal>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {modalText}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExpansionModal;\r\n","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as venn from 'venn.js';\r\nimport ExpansionModal from '../ExpansionModal/ExpansionModal';\r\n\r\nimport './Diagram.scss';\r\n\r\nclass Diagram extends React.Component {\r\n  state = {\r\n    width: 0,\r\n    height: 0,\r\n    modal: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.expansion !== prevProps.expansion) {\r\n      this.setState({ expansions: this.props.expansions });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  drawVenn = () => {\r\n    return (\r\n     <div ref=\"venn\"></div>\r\n    );\r\n  }\r\n\r\n  printVenn = (setsData) => {\r\n    const sets = setsData;\r\n    const chart = venn.VennDiagram().width(this.state.width).height(this.state.height - 150);\r\n    if (this.refs.venn) {\r\n      d3.select(this.refs.venn)\r\n        .datum(sets)\r\n        .call(chart);\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n    }));\r\n  }\r\n\r\n  updateDiagramExpansions = (expansions) => {\r\n    this.props.updateMainExpansions(expansions);\r\n  }\r\n\r\n  updateWindowDimensions = () => {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  render() {\r\n    const diagramData = this.props.setupDiagram(this.props.displayedCards);\r\n    this.printVenn(diagramData);\r\n\r\n    return (\r\n      <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n        <h1 className=\"mt-3\">Venns Against Humanity</h1>\r\n        {this.drawVenn()}\r\n        <div className=\"d-flex flex-row justify-content-center align-items-center\">\r\n          <button className=\"btn btn-primary mx-1\" onClick={this.props.selectRandomCards}>Randomize!</button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={this.toggle}>Expansions</button>\r\n          <ExpansionModal \r\n            allExpansions={this.props.allExpansions}\r\n            expansions={this.props.expansions}\r\n            modal={this.state.modal}\r\n            toggle={this.toggle}\r\n            updateDiagramExpansions={this.updateDiagramExpansions}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Diagram;\r\n","/* eslint-disable max-len */\r\nimport React from 'react';\r\nimport base from '../../Helpers/Data/base.json';\r\nimport CAHe1 from '../../Helpers/Data/theFirstExpansion.json';\r\nimport CAHe2 from '../../Helpers/Data/theSecondExpansion.json';\r\nimport CAHe3 from '../../Helpers/Data/theThirdExpansion.json';\r\nimport CAHe4 from '../../Helpers/Data/theFourthExpansion.json';\r\nimport CAHe5 from '../../Helpers/Data/theFifthExpansion.json';\r\nimport CAHe6 from '../../Helpers/Data/theSixthExpansion.json';\r\nimport greenbox from '../../Helpers/Data/greenBoxExpansion.json';\r\nimport nineties from '../../Helpers/Data/90sNostalgiaExpansion.json';\r\nimport Box from '../../Helpers/Data/boxExpansion.json';\r\nimport fantasy from '../../Helpers/Data/fantasyExpansion.json';\r\nimport food from '../../Helpers/Data/foodExpansion.json';\r\nimport science from '../../Helpers/Data/scienceExpansion.json';\r\nimport www from '../../Helpers/Data/worldWideWebExpansion.json';\r\nimport hillary from '../../Helpers/Data/voteForHillaryExpansion.json';\r\nimport trumpvote from '../../Helpers/Data/voteForTrumpExpansion.json';\r\nimport trumpbag from '../../Helpers/Data/trumpSurvivalExpansion.json';\r\nimport xmas2012 from '../../Helpers/Data/holiday2012Expansion.json';\r\nimport xmas2013 from '../../Helpers/Data/holiday2013Expansion.json';\r\nimport PAXE2013 from '../../Helpers/Data/paxEast2013Expansion.json';\r\nimport PAXP2013 from '../../Helpers/Data/paxPrime2013Expansion.json';\r\nimport PAXE2014 from '../../Helpers/Data/paxEast2014Expansion.json';\r\nimport PAXEP2014 from '../../Helpers/Data/paxEast2014PanelExpansion.json';\r\nimport PAXPP2014 from '../../Helpers/Data/paxPrime2014PanelExpansion.json';\r\nimport HOCAH from '../../Helpers/Data/houseOfCardsAgainstHumanityExpansion.json';\r\nimport reject from '../../Helpers/Data/rejectExpansion.json';\r\nimport reject2 from '../../Helpers/Data/reject2Expansion.json';\r\nimport Canadian from '../../Helpers/Data/canadianExpansion.json';\r\nimport Diagram from '../Diagram/Diagram';\r\n\r\nimport './Main.scss';\r\n\r\nconst defaultCards = ['', ' ', '  ', '    ', '     ', '      ', '       '];\r\n\r\nconst allExpansions = [\r\n  CAHe1,\r\n  CAHe2,\r\n  CAHe3,\r\n  CAHe4,\r\n  CAHe5,\r\n  CAHe6,\r\n  greenbox,\r\n  nineties,\r\n  Box,\r\n  fantasy,\r\n  food,\r\n  science,\r\n  www,\r\n  hillary,\r\n  trumpvote,\r\n  trumpbag,\r\n  xmas2012,\r\n  xmas2013,\r\n  PAXE2013,\r\n  PAXP2013,\r\n  PAXE2014,\r\n  PAXEP2014,\r\n  PAXPP2014,\r\n  HOCAH,\r\n  reject,\r\n  reject2,\r\n  Canadian,\r\n];\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    blackCards: [],\r\n    whiteCards: [],\r\n    displayedCards: [],\r\n    expansions: [],\r\n  }\r\n\r\n  componentDidMount() {\r\n    const blackCardsAsArray = base.blackCards.map((card) => Object.values(card)[0]);\r\n    const whiteCardsAsArray = [...base.whiteCards];\r\n    this.setState({ blackCards: blackCardsAsArray, whiteCards: whiteCardsAsArray, displayedCards: defaultCards });\r\n  }\r\n\r\n  selectRandomCards = () => {\r\n    const { blackCards, whiteCards } = this.state;\r\n    const randomCards = [];\r\n    const circleAText = whiteCards[Math.floor(Math.random() * whiteCards.length)];\r\n    const circleA = `c1 ${circleAText}`;\r\n    const circleBText = whiteCards[Math.floor(Math.random() * whiteCards.length)];\r\n    const circleB = `c1 ${circleBText}`;\r\n    const circleCText = whiteCards[Math.floor(Math.random() * whiteCards.length)];\r\n    const circleC = `c1 ${circleCText}`;\r\n    const circleAB = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    const circleAC = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    const circleBC = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    const circleABC = blackCards[Math.floor(Math.random() * blackCards.length)];\r\n    randomCards.push([circleA, circleB, circleC, circleAB, circleAC, circleBC, circleABC]);\r\n    this.setState({ displayedCards: randomCards });\r\n  }\r\n\r\n  setupDiagram = (cardsInput) => {\r\n    let cards = [];\r\n    let sets = [];\r\n    if (cardsInput) {\r\n      // eslint-disable-next-line prefer-destructuring\r\n      cards = cardsInput[0] === '' ? cardsInput : cardsInput[0];\r\n      const mainCircleSize = 10;\r\n      const intersectionCircleSize = mainCircleSize * 0.4;\r\n      const centerCircleSize = mainCircleSize * 0.2;\r\n      const A = cards[0];\r\n      const B = cards[1];\r\n      const C = cards[2];\r\n      const AB = cards[3];\r\n      const AC = cards[4];\r\n      const BC = cards[5];\r\n      const ABC = cards[6];\r\n      sets = [\r\n        { sets: [A], size: mainCircleSize },\r\n        { sets: [B], size: mainCircleSize },\r\n        { sets: [C], size: mainCircleSize },\r\n        { sets: [A, B], size: intersectionCircleSize, label: AB },\r\n        { sets: [A, C], size: intersectionCircleSize, label: AC },\r\n        { sets: [B, C], size: intersectionCircleSize, label: BC },\r\n        { sets: [A, B, C], size: centerCircleSize, label: ABC },\r\n      ];\r\n    }\r\n    return sets;\r\n  }\r\n\r\n  selectCards = (expansions, expansionToCheck, expansionToCheckName) => {\r\n    const cards = [[], []];\r\n    if (expansions.includes(expansionToCheckName)) {\r\n      const filteredBlackCards = expansionToCheck.blackCards.map((card) => Object.values(card)[0]);\r\n      filteredBlackCards.forEach((card) => {\r\n        cards[0].push(card);\r\n      });\r\n      expansionToCheck.whiteCards.forEach((card) => {\r\n        cards[1].push(card);\r\n      });\r\n    }\r\n    return cards;\r\n  }\r\n\r\n  updateMainExpansions = (expansions) => {\r\n    const pendingBlackCards = base.blackCards.map((card) => Object.values(card)[0]);\r\n    const pendingWhiteCards = [...base.whiteCards];\r\n    allExpansions.forEach((exp) => {\r\n      const expansionName = exp.order[0];\r\n      const expansionCards = this.selectCards(expansions, exp, expansionName);\r\n      expansionCards[0].forEach((card) => pendingBlackCards.push(card));\r\n      expansionCards[1].forEach((card) => pendingWhiteCards.push(card));\r\n      return expansionCards;\r\n    });\r\n    this.setState({ expansions, blackCards: pendingBlackCards, whiteCards: pendingWhiteCards });\r\n  }\r\n\r\n  render() {\r\n    let printDiagram = '';\r\n    if (this.state.blackCards.length > 0) {\r\n      printDiagram = <Diagram\r\n          allExpansions={allExpansions}\r\n          blackCards={this.state.blackCards}\r\n          displayedCards={this.state.displayedCards}\r\n          expansions={this.state.expansions}\r\n          selectRandomCards={this.selectRandomCards}\r\n          setupDiagram={this.setupDiagram}\r\n          updateMainExpansions={this.updateMainExpansions}\r\n          whiteCards={this.state.whiteCards}\r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          {printDiagram}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\nimport Main from '../Components/Main/Main';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/index.scss';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}